# プラン実行用
name: "_terraform-plan"

on:
  workflow_call:
    inputs:
      workspace: { required: true, type: string }

jobs:
  plan:
    runs-on: ubuntu-latest
    concurrency:
      group: terraform-${{ inputs.workspace }}-plan # 同時実行防止
      cancel-in-progress: true # 古いプランのみキャンセル
    env:
      TF_WORKSPACE: ${{ inputs.workspace }}
    steps:
      # 1) リポジトリのチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) GCP 認証：Auth
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{ secrets.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/gh-pool/providers/gh-provider
          service_account: tf-svc@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com
          project_id: ${{ secrets.PROJECT_ID }}
          audience: https://github.com/${{ github.repository }}

      # 3) Terraform をセットアップ
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: 1.11.4

      # 4) Terraform の初期化
      - name: Initialize Terraform
        run: terraform -chdir=infra init -input=false

      # 5) Terraform の検証
      - name: Validate Terraform
        env:
          TF_VAR_env_suffix: ${{ inputs.workspace }}
        run: terraform -chdir=infra validate

      # 6) Terraform のフォーマットチェック
      - name: Format Check
        run: terraform -chdir=infra fmt -check

      # 7) TFLint のセットアップ
      - uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.51.1

      # 8) TFLint の初期化
      - name: Init TFLint
        run: tflint --init
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # 9) TFLint の実行
      - name: Run TFLint
        run: tflint --chdir infra

      # 10) Trivy IaC スキャン
      - name: Run Trivy IaC scanner
        id: trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: "config"
          scan-ref: "./infra"
          severity: "HIGH,CRITICAL"
          output: trivy-scan-result.txt
          exit-code: "0"

      # 11) PR へ Trivy スキャン結果コメント
      - name: Comment Trivy scan result to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs   = require('fs');
            let body = fs.readFileSync('trivy-scan-result.txt', 'utf8').trim();

            // 本文が空の場合
            if (!body) {
              body = 'Trivy scan: 検出なし🎉';
            }

            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body,
            });

      # 12) Terraform Plan の実行
      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=infra plan \
            -lock-timeout=300s -no-color -detailed-exitcode \
            -var "env_suffix=${{ inputs.workspace }}" \
            -out=tfplan || [ $? -eq 2 ] || exit 1

      # 13) PR へ Plan コメント
      - name: Comment plan to PR
        if: github.event_name == 'pull_request'
        uses: borchero/terraform-plan-comment@v2
        with:
          token: ${{ github.token }}
          planfile: tfplan
          working-directory: infra
          header: "Terraform Plan (${{env.TF_WORKSPACE }})"
          skip-empty: true # 変更なしならコメントしない
